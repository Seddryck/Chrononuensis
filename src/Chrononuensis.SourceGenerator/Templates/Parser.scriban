#nullable enable

using Chrononuensis.Formats.Tokens;

namespace Chrononuensis.Parsers;

public class {{ struct_name }}Parser : ChrononuensisParser
{
    public static string DefaultPattern { get; } = "{{ default }}";

    public (
    {{- for part in parts ~}}int {{ part.name }}{{~ if !for.last ~}}, {{ end ~}}{{ end -}}
    ) Parse(string input, string format, IFormatProvider? provider)
    {
        var results = ParseInternal(input, format, provider, [
        {{- for part in parts ~}}typeof(I{{ part.name }}Token){{~ if !for.last ~}}, {{ end ~}}{{ end -}}
        ]);
        return ({{~ for part in parts ~}}(int)results[{{ for.index }}]{{~ if !for.last ~}}, {{ end ~}}{{ end ~}});
    }

    public (
    {{- for part in parts ~}}int {{ part.name }}{{~ if !for.last ~}}, {{ end ~}}{{ end -}}
    ) Parse(ReadOnlySpan<char> input, string format, IFormatProvider? provider)
    {
        var results = ParseInternal(input, format, provider, [
        {{- for part in parts ~}}typeof(I{{ part.name }}Token){{~ if !for.last ~}}, {{ end ~}}{{ end -}}
        ]);
        return ({{~ for part in parts ~}}(int)results[{{ for.index }}]{{~ if !for.last ~}}, {{ end ~}}{{ end ~}});
    }

    public bool TryParse(string? input, string format, IFormatProvider? provider, 
    {{- for part in parts }} out int? {{ part.name }}{{~ if !for.last ~}},{{ end ~}}{{ end -}}
    )
    {
        object[]? results = null;
        var result = !string.IsNullOrEmpty(input)
                        && TryParseInternal(input, format, provider, [
                            {{- for part in parts ~}}typeof(I{{ part.name }}Token){{~ if !for.last ~}}, {{ end ~}}{{ end -}}
                            ], out results);

        {{~ for part in parts ~}}
        {{ part.name }} = result ? (int)results![{{ for.index }}] : null;
        {{~ end ~}}
        return result;
    }

    public bool TryParse(ReadOnlySpan<char> input, string format, IFormatProvider? provider, 
    {{- for part in parts }} out int? {{ part.name }}{{~ if !for.last ~}},{{ end ~}}{{ end -}}
    )
    {
        object[]? results = null;
        var result = input.Length > 0
                        && TryParseInternal(input, format, provider, [
                            {{- for part in parts ~}}typeof(I{{ part.name }}Token){{~ if !for.last ~}}, {{ end ~}}{{ end -}}
                            ], out results);

        {{~ for part in parts ~}}
        {{ part.name }} = result ? (int)results![{{ for.index }}] : null;
        {{~ end ~}}
        return result;
    }
}
