#nullable enable

using System.Globalization;
using Chrononuensis.Parsers;

namespace Chrononuensis;

public partial record struct {{ struct_name }}
(
    {{- for part in parts }}
    {{ if parts.size == 1 }}{{ parts[0].type }} Value{{ else }}{{ part.type }} {{ part.name }}{{ end }}
    {{- if !for.last }},{{ end }}
    {{- end }}
)
    : IParsable<{{ struct_name }}>, IComparable<{{ struct_name }}>, IComparable, IEquatable<{{ struct_name }}>
{
    {{- for part in parts }}
    {{- if part.min && (part.max || part.max_f) }}
    {{- if parts.size ==1 && part.name == struct_name }}{{name = "Value"}}{{ else }}{{ name = part.name }}{{ end }}
    public {{ part.type }} {{ name }} { get; init; }
        = ({{ name }} >= {{ part.min }} && {{ name }} <= {{ part.max ?? part.max_f }})
            ? {{ name }}
            : throw new ArgumentOutOfRangeException(nameof({{ name }}), $"
                {{- if part.max_f }}When {{parts[0].name | string.downcase }} is { {{parts[0].name}} }, {{ end -}}
                {{- name }} must be between {{ part.min }} and { {{ part.max ?? part.max_f }} }.");
    {{- else if part.modulo }}
    public {{ part.type }} Value { get; init; }
        = (Value % {{ part.modulo }} == 0)
            ? Value
            : throw new ArgumentOutOfRangeException(nameof({{ part.name }}), $"Invalid {{ struct_name | string.downcase }}: The value must be a multiple of {{ part.modulo }}.");
    {{- end }}
    {{- end }}

    private static {{ struct_name }}Parser Parser { get; } = new();

    public static {{ struct_name }} Parse(string input, IFormatProvider? provider)
        => Parse(input, {{ struct_name }}Parser.DefaultPattern, provider);

    public static {{ struct_name }} Parse(string input, string format, IFormatProvider? provider = null)
    {
        var result = Parser.Parse(input, format, provider);
        return new {{ struct_name -}}
        (
        {{- for part in parts }}
        {{- if parts.size == 1 }}result{{ else }}result.{{ part.name }}{{ end }}
        {{- if !for.last ~}}, {{ end }}
        {{- end -}}
        );
    }

    public static {{ struct_name }} Parse(ReadOnlySpan<char> span, IFormatProvider? provider)
        => Parse(span, {{ struct_name }}Parser.DefaultPattern, provider);

    public static {{ struct_name }} Parse(ReadOnlySpan<char> span, string format, IFormatProvider? provider = null)
    {
        var result = Parser.Parse(span, format, provider);
        return new {{ struct_name -}}
        (
        {{- for part in parts }}
        {{- if parts.size == 1 }}result{{ else }}result.{{ part.name }}{{ end }}
        {{- if !for.last ~}}, {{ end }}
        {{- end -}}
        );
    }

    public static bool TryParse(string? s, IFormatProvider? provider, out {{ struct_name }} result)
        => TryParse(s, {{ struct_name }}Parser.DefaultPattern, provider, out result);

    public static bool TryParse(string? s, string format, IFormatProvider? provider, out {{ struct_name }} result)
    {
        var success = Parser.TryParse(s, format, provider, {{ for part in parts ~}}out var {{ part.name }}{{~ if !for.last ~}}, {{ end ~}}{{ end }});
        result = success
                    ? new {{ struct_name }}({{~ for part in parts ~}}{{ part.name }}!.Value{{~ if !for.last ~}}, {{ end ~}}{{ end }})
                    : default;
        return success;
    }

    public static bool TryParse(ReadOnlySpan<char> span, IFormatProvider? provider, out {{ struct_name }} result)
        => TryParse(span, {{ struct_name }}Parser.DefaultPattern, provider, out result);

    public static bool TryParse(ReadOnlySpan<char> span, string format, IFormatProvider? provider, out {{ struct_name }} result)
    {
        var success = Parser.TryParse(span, format, provider, {{ for part in parts ~}}out var {{ part.name }}{{~ if !for.last ~}}, {{ end ~}}{{ end }});
        result = success
                    ? new {{ struct_name }}({{~ for part in parts ~}}{{ part.name }}!.Value{{~ if !for.last ~}}, {{ end ~}}{{ end }})
                    : default;
        return success;
    }

    public int CompareTo({{ struct_name }} other)
        {{ if parts.size == 1 }} => Value.CompareTo(other.Value);
        {{- else }}=> {{ parts[0].name }} == other.{{ parts[0].name }} ? {{ parts[1].name }}.CompareTo(other.{{ parts[1].name }}) : {{ parts[0].name }}.CompareTo(other.{{ parts[0].name }});
        {{- end }}

    public int CompareTo(object? obj)
        => obj switch
        {
            null => 1,
            {{ struct_name }} y => CompareTo(y),
            _ => throw new ArgumentException("Object must be of type {{ struct_name }}", nameof(obj))
        };

    public static bool operator <({{ struct_name }} left, {{ struct_name }} right) => left.CompareTo(right) < 0;
    public static bool operator >({{ struct_name }} left, {{ struct_name }} right) => left.CompareTo(right) > 0;
    public static bool operator <=({{ struct_name }} left, {{ struct_name }} right) => left.CompareTo(right) <= 0;
    public static bool operator >=({{ struct_name }} left, {{ struct_name }} right) => left.CompareTo(right) >= 0;
}
